# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project, GKE_EMAIL with the service account email, GKE_KEY with the service account key.
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER and IMAGE environment variables (below).

name: Build and Deploy to GKE

on:
  push:
    branches:
    - main

# Environment variables available to all jobs and steps in this workflow
env:
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  GKE_EMAIL: ${{ secrets.GKE_EMAIL }}
  GITHUB_SHA: ${{ github.sha }}
  GKE_ZONE: us-west1-b
  GKE_CLUSTER: kgcash-2018-10
  IMAGE: kgcash
  USE_GKE_GCLOUD_AUTH_PLUGIN: true

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    services:
      db:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
        - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
          
    steps:
         
    - name: Setup python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Export gcloud related env variable
      run: export CLOUDSDK_PYTHON="/usr/bin/python3"

    - name: Update GKE
      run: |
        export REPO_URL="https://packages.cloud.google.com/apt" 
        sudo apt-get install google-cloud-sdk-gke-gcloud-auth-plugin

    - name: Verify MySQL connection from host
      run: |
        mysql --host 127.0.0.1 --port ${{ job.services.db.ports[3306] }} -uroot -proot -e "SHOW GRANTS FOR 'root'@'localhost'"

    - name: Checkout
      uses: actions/checkout@v3

    # Setup gcloud CLI
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        service_account_email: ${{ secrets.GKE_EMAIL }}
        service_account_key: ${{ secrets.GKE_KEY }}
        credentials_json: ${{ secrets.GKE_KEY }}

    - id: 'get-credentials'
      uses: 'google-github-actions/get-gke-credentials@v1'
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}

    # Configure docker to use the gcloud command-line tool as a credential helper
    - name: Set up docker to authenticate via gcloud
      run: |
        gcloud auth configure-docker

    # Cache latest Docker image to reduce build time
    - name: Build cache
      run: |
        docker pull gcr.io/"$GKE_PROJECT"/"$IMAGE":latest

    # Create tmp DB_CONFIG file for building into Docker container
    - name: Write database config file
      env:
        DB_CONFIG: ${{ secrets.DB_CONFIG }}
      run: |
        pwd
        echo "$DB_CONFIG" > ./config/database.yml

    # Build the Docker image
    - name: Build
      run: |
        docker build -t gcr.io/"$GKE_PROJECT"/"$IMAGE" --cache-from gcr.io/"$GKE_PROJECT"/"$IMAGE":latest .

    # Test
    - name: Test
      run: |
        docker run --net=host -e "RAILS_ENV=test" gcr.io/"$GKE_PROJECT"/"$IMAGE" /bin/bash -c "rake db:create; rake db:migrate; rspec"

    # Remove DB Config file
    - name: Remove database config file
      run: |
        rm ./config/database.yml

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |
        docker -- push gcr.io/"$GKE_PROJECT"/"$IMAGE"

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $GKE_PROJECT
        kubectl delete deployments --all
        kubectl create -f ./kubernetes/kgcash-2018-frontend.yaml
